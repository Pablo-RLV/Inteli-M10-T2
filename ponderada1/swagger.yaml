openapi: 3.0.0
info:
  title: ToDo Application API
  version: 1.0.0
  description: Flask ToDo list API  with JWT authentication via cookies.

servers:
  - url: http://localhost:5000
    description: Development server

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: access_token_cookie
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password
    Note:
      type: object
      properties:
        id:
          type: integer
        text:
          type: string
      required:
        - text

paths:
  /login:
    post:
      summary: User login and token generation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: Login successful and JWT token set in cookie.
          headers:
            Set-Cookie:
              description: Cookie with the JWT token.
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        400:
          description: Bad request if username or password are not provided.

  /users:
    get:
      summary: Retrieves all users
      security:
        - cookieAuth: []
      responses:
        200:
          description: A list of users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: User created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{id}:
    get:
      summary: Retrieves a user by ID
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Detailed information of a user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User not found.

    put:
      summary: Update a user's information
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: User updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User not found.

    delete:
      summary: Delete a user by ID
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: User deleted successfully.
        404:
          description: User not found.

  /notes:
    get:
      summary: Retrieves notes associated with authenticated user
      security:
        - cookieAuth: []
      responses:
        200:
          description: A list of notes for the authenticated user.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Note'
        401:
          description: Unauthorized if JWT is invalid or not provided.

    post:
      summary: Create a new task for the authenticated user
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Note'
      responses:
        200:
          description: Note created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'

  /notes/{id}:
    get:
      summary: Retrieves a specific task by ID
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Detailed information of a task.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        404:
          description: Note not found or unauthorized access.

    put:
      summary: Update a specific task's details
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Note'
      responses:
        200:
          description: Note updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        404:
          description: Note not found or unauthorized access.

    delete:
      summary: Delete a specific task by ID
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Note deleted successfully.
        404:
          description: Note not found or unauthorized access.

security:
  - cookieAuth: []